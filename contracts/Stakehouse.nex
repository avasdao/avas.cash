pragma nexscript ^0.1.0;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * Copyright (c) 2023 Ava's DAO
 * Released under the MIT License.
 *
 * STAKEHOUSE
 *
 * Creates a non-custodial container (ie. smart contract address), to be used
 * for securing one or more assets until a specific expiration time in the
 * future.
 *
 * Assets being held (ie. time-locked) in a stakehouse:
 *   1. cannot be transferred until AFTER the reservation (expiration) time.
 *   2. are 100% under the control of the stakehouse owner.
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * Version     : 01
 * Fingerprint : 0x00000000
 * Namespace   : STAKE01
 *
 * owner       : Party whom will receive the payouts.
 * reservation : The number of (512 second) cycles until expiration.
 *
 * Reservation Times
 *   - 1 MONTH    - 30 days   -  ~5,063 cycles
 *   - 1 QUARTER  - 90 days   - ~15,188 cycles
 *   - 1 YEAR     - 365 days  - ~61,594 cycles
 * NOTE: Each reservation cycle lasts for 512 seconds; while there are
 *       168.75 cycles in a 24 hour day.
 * (source: https://prestwi.ch/bitcoin-time-locks/)
 *
 * For more information, please visit the following resources:
 *   - https://avas.cash
 *   - https://avasdao.org
 *
 */
contract Stakehouse(bytes20 ownerHash, int reservation) {
    /**
     * Depart
     *
     * Allows a stakehouse owner to remove their assets after their
     * reservation time has expired.
     *
     * @param owner
     * @param signature
     */
    function depart(pubkey owner, sig signature) {
        /* Verify UTXO age is AFTER the reservation time. */
        require(tx.age >= reservation);

        /* Verify public key hash belongs to the stakehouse owner. */
        require(hash160(owner) == ownerHash);

        /* Verify transaction is signed by the stakehouse owner. */
        require(checkSig(signature, owner));
    }
}
